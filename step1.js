async function startRegistration(followLink) {
    // =================================================================
    // C·∫§U H√åNH V√Ä C√ÅC H√ÄM TI·ªÜN √çCH
    // =================================================================
    const YOUR_VERCEL_APP_URL = 'https://kling-api-proxy.vercel.app';

    function generatePassword(length = 10) {
        const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
        let password = "";
        for (let i = 0; i < length; i++) {
            password += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return password;
    }

    async function waitForElement(selector, timeout = 20000) {
        return new Promise((resolve, reject) => {
            const interval = setInterval(() => {
                const el = document.querySelector(selector);
                if (el) {
                    clearInterval(interval);
                    clearTimeout(timer);
                    resolve(el);
                }
            }, 500);
            const timer = setTimeout(() => {
                clearInterval(interval);
                reject(new Error(`Timeout ch·ªù ph·∫ßn t·ª≠: ${selector}`));
            }, timeout);
        });
    }

    async function waitForCaptcha(timeout = 30000) {
        console.log("üß© ƒêang ch·ªù captcha (n·∫øu c√≥)...");
        return new Promise((resolve) => {
            const interval = setInterval(() => {
                if (!document.querySelector('.kwai-captcha-slider-wrapper')) {
                    clearInterval(interval);
                    clearTimeout(timer);
                    console.log("‚úÖ Captcha ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ho·∫∑c kh√¥ng xu·∫•t hi·ªán.");
                    resolve();
                }
            }, 500);
            const timer = setTimeout(() => {
                clearInterval(interval);
                console.warn("‚ö†Ô∏è H·∫øt th·ªùi gian ch·ªù captcha, ti·∫øp t·ª•c flow...");
                resolve();
            }, timeout);
        });
    }

    async function fetchEmail() {
        const res = await fetch(`${YOUR_VERCEL_APP_URL}/api/create-email`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
        });
        if (!res.ok) throw new Error(`L·ªói API create-email: ${res.status}`);
        const json = await res.json();
        if (!json.email) throw new Error("Ph·∫£n h·ªìi API kh√¥ng ch·ª©a email.");
        console.log(`‚úÖ Nh·∫≠n ƒë∆∞·ª£c email: ${json.email}`);
        return { email: json.email };
    }

    async function fetchVerificationCode(email) {
        if (!email) {
            console.warn("‚ö†Ô∏è Kh√¥ng c√≥ email, b·ªè qua l·∫•y m√£.");
            return null;
        }
        console.log(`‚è≥ ƒêang ch·ªù m√£ x√°c minh cho ${email}...`);
        for (let i = 0; i < 30; i++) {
            try {
                const res = await fetch(`${YOUR_VERCEL_APP_URL}/api/check-email`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email: email })
                });
                if (!res.ok) throw new Error(`L·ªói API check-email: ${res.status}`);
                const json = await res.json();
                if (json && json.text) {
                    const match = json.text.match(/\b\d{6}\b/);
                    if (match) {
                        console.log(`‚úÖ T√¨m th·∫•y m√£ x√°c minh: ${match[0]}`);
                        return match[0];
                    }
                }
                await new Promise(r => setTimeout(r, 2000));
            } catch (err) {
                console.error("‚ùå L·ªói khi g·ªçi API check-email:", err.message);
                await new Promise(r => setTimeout(r, 2000));
            }
        }
        console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m√£ x√°c minh trong email sau 60 gi√¢y.");
        return null;
    }

    // =================================================================
    // FLOW ƒêƒÇNG K√ù CH√çNH
    // =================================================================
    try {
        if (!followLink || !followLink.startsWith('https://app.klingai.com/')) {
            throw new Error("Link follow kh√¥ng h·ª£p l·ªá!");
        }

        const { email } = await fetchEmail();
        const password = generatePassword();
        console.log("T√†i kho·∫£n m·ªõi s·∫Ω ƒë∆∞·ª£c t·∫°o:", { email, password });

        // B·∫Øt ƒë·∫ßu lu·ªìng ƒëƒÉng k√Ω
        const signInBtn = await waitForElement('div.login');
        signInBtn.click();
        console.log("‚û°Ô∏è ƒê√£ click Sign In");
        await new Promise(r => setTimeout(r, 1000));

        let emailBtn;
        document.querySelectorAll('div.sign-in-button span.caption').forEach(caption => {
            if (caption.innerText.trim() === 'Sign in with email') {
                emailBtn = caption.closest('div.sign-in-button');
            }
        });
        if (!emailBtn) {
            emailBtn = document.querySelector('div.sign-in-button[style*="margin-top: 24px"]');
        }
        if (!emailBtn) throw new Error("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t Sign in with email");
        emailBtn.click();
        console.log("‚û°Ô∏è ƒê√£ click Sign in with Email");
        await new Promise(r => setTimeout(r, 1000));

        const signUpLink = await waitForElement('p.clickable a');
        signUpLink.click();
        console.log("‚û°Ô∏è ƒê√£ click Sign up for free");

        const emailInput = await waitForElement('input[placeholder="Enter Email Address"]');
        const passInput = await waitForElement('input[placeholder="Password (at least 8 characters)"]');
        const confirmInput = await waitForElement('input[placeholder="Confirm Password"]');

        emailInput.value = email;
        passInput.value = password;
        confirmInput.value = password;
        [emailInput, passInput, confirmInput].forEach(input => input.dispatchEvent(new Event('input', { bubbles: true })));
        console.log("‚û°Ô∏è ƒê√£ ƒëi·ªÅn th√¥ng tin ƒëƒÉng k√Ω.");

        const nextBtn = await waitForElement('.generic-button.critical.large');
        nextBtn.click();
        console.log("‚û°Ô∏è ƒê√£ click Next, ch·ªù captcha...");

        await waitForCaptcha(30000);

        const codeInput = await waitForElement('input[placeholder="Verification Code"]', 60000);
        const code = await fetchVerificationCode(email);
        if (!code) {
            throw new Error("Kh√¥ng th·ªÉ t·ª± ƒë·ªông l·∫•y m√£ x√°c minh.");
        }
        console.log("‚û°Ô∏è ƒê√£ ƒëi·ªÅn m√£ x√°c minh.");
        codeInput.value = code;
        codeInput.dispatchEvent(new Event('input', { bubbles: true }));
        codeInput.dispatchEvent(new Event('change', { bubbles: true }));

        const finalSubmitBtn = await waitForElement('button.generic-button.critical.large:not([disabled])');
        finalSubmitBtn.click();
        console.log("‚úÖ Ho√†n t·∫•t ƒëƒÉng k√Ω!");

        // Ch·ªù trang ·ªïn ƒë·ªãnh sau khi ƒëƒÉng k√Ω
        await new Promise(r => setTimeout(r, 5000));

        // Chuy·ªÉn ƒë·∫øn link follow
        console.log(`üöÄ Chuy·ªÉn h∆∞·ªõng ƒë·∫øn: ${followLink}`);
        window.location.href = followLink;

    } catch (err) {
        console.error("‚ùå Flow ƒëƒÉng k√Ω th·∫•t b·∫°i:", err.message);
    }
}
