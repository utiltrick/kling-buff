// ===================================================================================
// == SCRIPT T·ª∞ ƒê·ªòNG TH√îNG MINH KLING AI (v2 - ƒê√£ s·ª≠a Step 1) ==
// D√°n 1 l·∫ßn duy nh·∫•t, sau ƒë√≥ d√πng l·ªánh startAutomation() v√† stopAutomation()
// ===================================================================================

// --- C√ÅC H√ÄM TI·ªÜN √çCH ---
const YOUR_VERCEL_APP_URL = 'https://kling-api-proxy.vercel.app';
function generatePassword(length = 10) { const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*"; let p = ""; for (let i = 0; i < length; i++) { p += chars.charAt(Math.floor(Math.random() * chars.length)); } return p; }
async function findButtonByText(text) { console.log(`T√¨m n√∫t: "${text}"`); await new Promise(r => setTimeout(r, 2000)); const allButtons = document.querySelectorAll('button'); for (const btn of allButtons) { if (btn.textContent.trim().includes(text)) { console.log(`‚úÖ Th·∫•y n√∫t: "${text}"`); return btn; } } throw new Error(`Kh√¥ng th·∫•y n√∫t: "${text}"`); }
async function fetchEmail() { const r = await fetch(`${YOUR_VERCEL_APP_URL}/api/create-email`, { method: 'POST', headers: { 'Content-Type': 'application/json' } }); if (!r.ok) throw new Error("L·ªói API create-email"); const j = await r.json(); if (!j.email) throw new Error("API kh√¥ng tr·∫£ v·ªÅ email."); return j; }
async function fetchVerificationCode(email) { for (let i = 0; i < 30; i++) { try { const r = await fetch(`${YOUR_VERCEL_APP_URL}/api/check-email`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email }) }); if (r.ok) { const j = await r.json(); if (j && j.text) { const m = j.text.match(/\b\d{6}\b/); if (m) return m[0]; } } } catch (e) {} await new Promise(r => setTimeout(r, 2000)); } throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c m√£ x√°c minh."); }
async function waitForElement(selector, timeout = 20000) { return new Promise((resolve, reject) => { const i = setInterval(() => { const el = document.querySelector(selector); if (el) { clearInterval(i); clearTimeout(t); resolve(el); } }, 500); const t = setTimeout(() => { clearInterval(i); reject(new Error(`Timeout: ${selector}`)); }, timeout); }); }
async function waitForCaptcha(timeout = 30000) { return new Promise((resolve) => { const i = setInterval(() => { if (!document.querySelector('.kwai-captcha-slider-wrapper')) { clearInterval(i); clearTimeout(t); resolve(); } }, 500); const t = setTimeout(() => { clearInterval(i); resolve(); }, timeout); }); }

// --- H√ÄM ƒêI·ªÄU KHI·ªÇN ---
function startAutomation(followLink) {
    if (!followLink || !followLink.startsWith('https://app.klingai.com/')) {
        console.error("‚ùå Link follow kh√¥ng h·ª£p l·ªá!");
        return;
    }
    console.log("üöÄ B·∫Øt ƒë·∫ßu chu tr√¨nh t·ª± ƒë·ªông...");
    localStorage.setItem('kling_follow_link', followLink);
    localStorage.setItem('kling_automation_step', 'REGISTER');
    // Chuy·ªÉn ƒë·∫øn trang ch·ªß ƒë·ªÉ b·∫Øt ƒë·∫ßu n·∫øu ch∆∞a ·ªü ƒë√≥
    if (!window.location.href.endsWith('/global/')) {
        window.location.href = 'https://app.klingai.com/global/';
    } else {
        window.location.reload(); // T·∫£i l·∫°i ƒë·ªÉ k√≠ch ho·∫°t script
    }
}

function stopAutomation() {
    localStorage.removeItem('kling_follow_link');
    localStorage.removeItem('kling_automation_step');
    console.log("üõë ƒê√£ d·ª´ng chu tr√¨nh t·ª± ƒë·ªông. M·ªçi ho·∫°t ƒë·ªông s·∫Ω ng·ª´ng ·ªü trang ti·∫øp theo.");
}

// --- LOGIC T·ª∞ ƒê·ªòNG CH·∫†Y M·ªñI KHI T·∫¢I TRANG ---
(async () => {
    const step = localStorage.getItem('kling_automation_step');
    const followLink = localStorage.getItem('kling_follow_link');

    if (!step) { return; }

    console.log(`ü§ñ Tr·∫°ng th√°i hi·ªán t·∫°i: ${step}`);

    try {
        switch (step) {
            case 'REGISTER':
                console.log("--- B∆∞·ªõc 1: ƒêƒÉng k√Ω ---");
                const { email } = await fetchEmail();
                const password = generatePassword();
                console.log(`... D√πng email: ${email}`);

                // 1. Nh·∫•p v√†o n√∫t/div ƒêƒÉng nh·∫≠p ch√≠nh ·ªü trang ch·ªß
                (await waitForElement('div.login')).click();
                await new Promise(r => setTimeout(r, 1500));

                // 2. Nh·∫•p v√†o "Sign in with email"
                (await findButtonByText('Sign in with email')).click();
                await new Promise(r => setTimeout(r, 1500));

                // 3. Nh·∫•p v√†o link "Sign up for free"
                (await waitForElement('p.clickable a')).click();

                // 4. ƒêi·ªÅn th√¥ng tin v√†o form
                const emailInput = await waitForElement('input[placeholder="Enter Email Address"]');
                const passInput = await waitForElement('input[placeholder="Password (at least 8 characters)"]');
                const confirmInput = await waitForElement('input[placeholder="Confirm Password"]');
                emailInput.value = email;
                passInput.value = password;
                confirmInput.value = password;
                [emailInput, passInput, confirmInput].forEach(input => input.dispatchEvent(new Event('input', { bubbles: true })));
                
                // 5. Nh·∫•p v√†o n√∫t Next
                (await findButtonByText('Next')).click();

                // 6. Ch·ªù x·ª≠ l√Ω captcha (n·∫øu c√≥)
                await waitForCaptcha(30000);

                // 7. ƒêi·ªÅn m√£ x√°c minh
                const code = await fetchVerificationCode(email);
                const codeInput = await waitForElement('input[placeholder="Verification Code"]', 60000);
                codeInput.value = code;
                codeInput.dispatchEvent(new Event('input', { bubbles: true }));
                
                // 8. Ho√†n t·∫•t ƒëƒÉng k√Ω b·∫±ng c√°ch nh·∫•n v√†o n√∫t cu·ªëi c√πng
                const finalSubmitButton = await waitForElement('button.generic-button.critical.large:not([disabled])');
                finalSubmitButton.click();

                console.log("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng!");
                localStorage.setItem('kling_automation_step', 'FOLLOW');
                await new Promise(r => setTimeout(r, 4000));
                window.location.href = followLink;
                break;

            case 'FOLLOW':
                console.log("--- B∆∞·ªõc 2: Follow ---");
                (await findButtonByText('Follow')).click();
                console.log("‚úÖ ƒê√£ Follow!");
                localStorage.setItem('kling_automation_step', 'SIGNOUT');
                await new Promise(r => setTimeout(r, 3000));
                window.location.href = 'https://app.klingai.com/global/account';
                break;

            case 'SIGNOUT':
                console.log("--- B∆∞·ªõc 3: ƒêƒÉng xu·∫•t ---");
                // Th·ª≠ t√¨m v√† nh·∫•n n√∫t "Sign Out" tr·ª±c ti·∫øp
                try {
                    const signOutBtn = await findButtonByText('Sign Out');
                    signOutBtn.click();
                } catch (e) {
                    // N·∫øu kh√¥ng th·∫•y, c√≥ th·ªÉ n√≥ b·ªã ·∫©n sau n√∫t "Profile Settings"
                    console.log('Kh√¥ng th·∫•y n√∫t "Sign Out", th·ª≠ t√¨m "Profile Settings"...');
                    (await findButtonByText('Profile Settings')).click();
                    (await findButtonByText('Sign Out')).click();
                }
                console.log("‚úÖ ƒê√£ ƒêƒÉng xu·∫•t! Ho√†n th√†nh chu tr√¨nh.");
                stopAutomation(); // X√≥a tr·∫°ng th√°i ƒë·ªÉ k·∫øt th√∫c
                await new Promise(r => setTimeout(r, 3000));
                window.location.href = 'https://app.klingai.com/global/';
                break;
        }
    } catch (err) {
        console.error(`‚ùå L·ªói ·ªü b∆∞·ªõc ${step}:`, err);
        stopAutomation(); // D·ª´ng l·∫°i n·∫øu c√≥ l·ªói
    }
})();
