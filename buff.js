(async () => {
    // =================================================================
    // C·∫§U H√åNH: D√ÅN URL VERCEL API C·ª¶A B·∫†N V√ÄO ƒê√ÇY
    // =================================================================
    const YOUR_VERCEL_APP_URL = 'https://kling-api-proxy.vercel.app'; // ƒê√£ c·∫≠p nh·∫≠t link c·ªßa b·∫°n
    // =================================================================

    console.log("üöÄ Script b·∫Øt ƒë·∫ßu... (C·∫•u tr√∫c g·ªëc, d√πng Mailsac)");

    // --- C√ÅC H√ÄM TI·ªÜN √çCH ---
    function generatePassword(length = 10) {
        const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
        let password = "";
        for (let i = 0; i < length; i++) {
            password += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return password;
    }

    async function waitForElement(selector, timeout = 20000) {
        return new Promise((resolve, reject) => {
            const interval = setInterval(() => {
                const el = document.querySelector(selector);
                if (el) {
                    clearInterval(interval);
                    clearTimeout(timer);
                    resolve(el);
                }
            }, 500);
            const timer = setTimeout(() => {
                clearInterval(interval);
                reject(new Error(`Timeout ch·ªù ph·∫ßn t·ª≠: ${selector}`));
            }, timeout);
        });
    }

    async function waitForCaptcha(timeout = 30000) {
        console.log("üß© ƒêang ch·ªù captcha (n·∫øu c√≥)...");
        return new Promise((resolve) => {
            const interval = setInterval(() => {
                if (!document.querySelector('.kwai-captcha-slider-wrapper')) {
                    clearInterval(interval);
                    clearTimeout(timer);
                    console.log("‚úÖ Captcha ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ho·∫∑c kh√¥ng xu·∫•t hi·ªán.");
                    resolve();
                }
            }, 500);
            const timer = setTimeout(() => {
                clearInterval(interval);
                console.warn("‚ö†Ô∏è H·∫øt th·ªùi gian ch·ªù captcha, ti·∫øp t·ª•c flow...");
                resolve();
            }, timeout);
        });
    }

    // --- C√ÅC H√ÄM API ƒê√É ƒê∆Ø·ª¢C THAY TH·∫æ ---

    // THAY TH·∫æ 1: D√πng API Mailsac ƒë·ªÉ t·∫°o email
    async function fetchEmail() {
        try {
            const res = await fetch(`${YOUR_VERCEL_APP_URL}/api/create-email`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            });
            if (!res.ok) throw new Error(`L·ªói API create-email: ${res.status}`);
            const json = await res.json();
            if (!json.email) throw new Error("Ph·∫£n h·ªìi API kh√¥ng ch·ª©a email.");
            
            console.log(`‚úÖ Nh·∫≠n ƒë∆∞·ª£c email: ${json.email}`);
            return { email: json.email }; // Tr·∫£ v·ªÅ object ch·ª©a email
        } catch (err) {
            console.error("‚ùå L·ªói khi g·ªçi API create-email:", err.message);
            throw err;
        }
    }

    // THAY TH·∫æ 2: D√πng API Mailsac ƒë·ªÉ ki·ªÉm tra email
    async function fetchVerificationCode(email) {
        if (!email) {
            console.warn("‚ö†Ô∏è Kh√¥ng c√≥ email, b·ªè qua l·∫•y m√£.");
            return null;
        }
        console.log(`‚è≥ ƒêang ch·ªù m√£ x√°c minh cho ${email}...`);
        for (let i = 0; i < 30; i++) {
            try {
                const res = await fetch(`${YOUR_VERCEL_APP_URL}/api/check-email`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email: email })
                });
                if (!res.ok) throw new Error(`L·ªói API check-email: ${res.status}`);
                const json = await res.json();
                
                if (json && json.text) {
                    const content = json.text;
                    const match = content.match(/\b\d{6}\b/);
                    if (match) {
                        console.log(`‚úÖ T√¨m th·∫•y m√£ x√°c minh: ${match[0]}`);
                        return match[0];
                    }
                }
                await new Promise(r => setTimeout(r, 2000));
            } catch (err) {
                console.error("‚ùå L·ªói khi g·ªçi API check-email:", err.message);
                await new Promise(r => setTimeout(r, 2000));
            }
        }
        console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m√£ x√°c minh trong email sau 60 gi√¢y.");
        return null;
    }

    // --- FLOW CH√çNH GI·ªÆ NGUY√äN C·∫§U TR√öC G·ªêC ---
    
    async function runFlow(followLink) {
        try {
            const { email } = await fetchEmail();
            const password = generatePassword();
            console.log("T√†i kho·∫£n m·ªõi:", { email, password });

            // B·∫Øt ƒë·∫ßu lu·ªìng ƒëƒÉng k√Ω
            const signInBtn = await waitForElement('div.login');
            signInBtn.click();
            console.log("‚û°Ô∏è Click Sign In");
            await new Promise(r => setTimeout(r, 1000));

            let emailBtn;
            document.querySelectorAll('div.sign-in-button span.caption').forEach(caption => {
                if (caption.innerText.trim() === 'Sign in with email') {
                    emailBtn = caption.closest('div.sign-in-button');
                }
            });
            if (!emailBtn) {
                emailBtn = document.querySelector('div.sign-in-button[style*="margin-top: 24px"]');
            }
            if (!emailBtn) throw new Error("‚ùå Kh√¥ng t√¨m th·∫•y n√∫t Sign in with email");
            emailBtn.click();
            console.log("‚û°Ô∏è Click Sign in with Email");

            await new Promise(r => setTimeout(r, 1000));

            const signUpLink = await waitForElement('p.clickable a');
            signUpLink.click();
            console.log("‚û°Ô∏è Click Sign up for free");

            const emailInput = await waitForElement('input[placeholder="Enter Email Address"]');
            const passInput = await waitForElement('input[placeholder="Password (at least 8 characters)"]');
            const confirmInput = await waitForElement('input[placeholder="Confirm Password"]');

            emailInput.value = email;
            passInput.value = password;
            confirmInput.value = password;
            [emailInput, passInput, confirmInput].forEach(input => input.dispatchEvent(new Event('input', { bubbles: true })));

            const nextBtn = await waitForElement('.generic-button.critical.large');
            nextBtn.click();
            console.log("‚û°Ô∏è ƒê√£ click Next, ch·ªù captcha...");

            await waitForCaptcha(30000);

            const codeInput = await waitForElement('input[placeholder="Verification Code"]', 60000);
            const code = await fetchVerificationCode(email); // Ch·ªâ c·∫ßn truy·ªÅn email
            if (!code) {
                throw new Error("Kh√¥ng th·ªÉ t·ª± ƒë·ªông l·∫•y m√£ x√°c minh.");
            }

            codeInput.value = code;
            codeInput.dispatchEvent(new Event('input', { bubbles: true }));
            codeInput.dispatchEvent(new Event('change', { bubbles: true }));

            const finalSubmitBtn = await waitForElement('button.generic-button.critical.large:not([disabled])');
            finalSubmitBtn.click();
            console.log("‚úÖ ƒê√£ nh·∫≠p m√£ v√† submit ho√†n t·∫•t ƒëƒÉng k√Ω!");

            // T·∫°i ƒëi·ªÉm n√†y, trang c√≥ th·ªÉ t·ª± ƒë·ªông ƒëi·ªÅu h∆∞·ªõng. Script c·∫ßn ph·∫£i ƒë·ªß linh ho·∫°t.
            await new Promise(r => setTimeout(r, 5000)); // Ch·ªù trang ·ªïn ƒë·ªãnh sau khi ƒëƒÉng k√Ω

            console.log(`üåê ƒêang v√†o link buff follow: ${followLink}`);
            // L·ªánh n√†y s·∫Ω g√¢y t·∫£i l·∫°i trang, c√≥ th·ªÉ l√†m ng·∫Øt v√≤ng l·∫∑p for ·ªü ngo√†i
            window.location.href = followLink;
            await new Promise(r => setTimeout(r, 5000)); // Ch·ªù trang follow t·∫£i xong

            const followBtn = await waitForElement('button.follow-button', 10000);
            followBtn.click();
            console.log("‚úÖ ƒê√£ nh·∫•n n√∫t Follow");

            console.log("üåê ƒêang v√†o trang Profile Settings ƒë·ªÉ ƒëƒÉng xu·∫•t...");
            // L·ªánh n√†y c≈©ng s·∫Ω g√¢y t·∫£i l·∫°i trang
            window.location.href = 'https://app.klingai.com/global/account';
            await new Promise(r => setTimeout(r, 3000)); 

            const profileSettingsBtn = await waitForElement('button:contains("Profile Settings"), .profile-settings', 10000);
            profileSettingsBtn.click();
            console.log("‚úÖ ƒê√£ nh·∫•n n√∫t Profile Settings");

            const signOutBtn = await waitForElement('button:contains("Sign Out"), .sign-out', 10000);
            signOutBtn.click();
            console.log("‚úÖ ƒê√£ nh·∫•n n√∫t Sign Out");

            await new Promise(r => setTimeout(r, 2000)); // Ch·ªù ƒëƒÉng xu·∫•t xong
            
        } catch (err) {
            console.error("‚ùå Flow th·∫•t b·∫°i:", err);
            throw err;
        }
    }

    // --- V√íNG L·∫∂P CH√çNH GI·ªÆ NGUY√äN C·∫§U TR√öC G·ªêC ---
    async function main() {
        while (true) {
            const followLink = prompt("Nh·∫≠p link buff follow (v√≠ d·ª•: https://app.klingai.com/global/user-home/7054579/all):");
            if (!followLink || !followLink.startsWith('https://app.klingai.com/')) {
                console.error("‚ùå Link kh√¥ng h·ª£p l·ªá, ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng https://app.klingai.com/");
                continue;
            }

            const runCountInput = prompt("Nh·∫≠p s·ªë l·∫ßn ch·∫°y (s·ªë nguy√™n d∆∞∆°ng):");
            const runCount = parseInt(runCountInput);
            if (isNaN(runCount) || runCount <= 0) {
                console.error("‚ùå S·ªë l·∫ßn ch·∫°y kh√¥ng h·ª£p l·ªá, ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng");
                continue;
            }

            console.log(`üîÑ S·∫Ω ch·∫°y ${runCount} l·∫ßn v·ªõi link: ${followLink}`);

            for (let i = 1; i <= runCount; i++) {
                console.log(`\n\n--- B·∫Øt ƒë·∫ßu l·∫ßn ch·∫°y th·ª© ${i}/${runCount} ---`);
                try {
                    await runFlow(followLink);
                    console.log(`‚úÖ Ho√†n th√†nh l·∫ßn ch·∫°y th·ª© ${i}`);
                } catch (err) {
                    console.error(`‚ùå L·ªói ·ªü l·∫ßn ch·∫°y th·ª© ${i}:`, err);
                    // N·∫øu c√≥ l·ªói, c√≥ th·ªÉ d·ª´ng v√≤ng l·∫∑p ƒë·ªÉ tr√°nh l·∫∑p l·∫°i l·ªói
                    // break; 
                }
                // N·∫øu kh√¥ng c√≥ l·ªói, ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi ch·∫°y l·∫ßn ti·∫øp theo
                await new Promise(r => setTimeout(r, 2000));
            }
            console.log("‚úÖ ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√°c l·∫ßn ch·∫°y cho phi√™n n√†y. B·∫Øt ƒë·∫ßu phi√™n m·ªõi...");
        }
    }

    // Ch·∫°y ch∆∞∆°ng tr√¨nh
    try {
        await main();
    } catch (err) {
        console.error("‚ùå Script th·∫•t b·∫°i:", err);
    }
})();
