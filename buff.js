(async () => {
    // =================================================================
    // ƒê√£ c·∫≠p nh·∫≠t URL Vercel c·ªßa b·∫°n
    // =================================================================
    const YOUR_VERCEL_APP_URL = 'https://kling-api-proxy.vercel.app';
    // =================================================================

    console.log("üöÄ Script t·ª± ƒë·ªông h√≥a Kling B·∫Øt ƒë·∫ßu...");

    function generatePassword(length = 10) {
        const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
        let password = "";
        for (let i = 0; i < length; i++) {
            password += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return password;
    }

    async function fetchEmail() {
        const res = await fetch(`${YOUR_VERCEL_APP_URL}/api/create-email`, { method: 'POST' });
        if (!res.ok) throw new Error("Kh√¥ng th·ªÉ g·ªçi API create-email tr√™n Vercel.");
        const json = await res.json();
        console.log(`‚úÖ L·∫•y email th√†nh c√¥ng: ${json.email}`);
        return { email: json.email };
    }

    async function fetchVerificationCode(email) {
        console.log(`‚è≥ ƒêang t√¨m m√£ x√°c minh cho ${email}...`);
        for (let i = 0; i < 30; i++) { // Th·ª≠ trong 60 gi√¢y
            try {
                const res = await fetch(`${YOUR_VERCEL_APP_URL}/api/check-email`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email: email })
                });
                const json = await res.json();
                if (json && json.text) {
                    const match = json.text.match(/\b\d{6}\b/);
                    if (match) {
                        console.log(`‚úÖ T√¨m th·∫•y m√£: ${match[0]}`);
                        return match[0];
                    }
                }
                await new Promise(r => setTimeout(r, 2000));
            } catch (err) {
                console.error("L·ªói khi g·ªçi check-email:", err);
            }
        }
        console.warn("‚ö†Ô∏è H·∫øt th·ªùi gian ch·ªù, kh√¥ng t√¨m th·∫•y m√£ x√°c minh.");
        return null;
    }

    async function waitForElement(selector, timeout = 15000) {
        return new Promise((resolve, reject) => {
            const el = document.querySelector(selector);
            if (el) return resolve(el);
            const observer = new MutationObserver(() => {
                const foundEl = document.querySelector(selector);
                if (foundEl) {
                    observer.disconnect();
                    resolve(foundEl);
                }
            });
            observer.observe(document.body, { childList: true, subtree: true });
            setTimeout(() => {
                observer.disconnect();
                reject(new Error(`Timeout ch·ªù ph·∫ßn t·ª≠: ${selector}`));
            }, timeout);
        });
    }

    async function runFlow(followLink) {
        try {
            const { email } = await fetchEmail();
            const password = generatePassword();
            console.log("üìß Email:", email, "| üîê Password:", password);

            await waitForElement('div.login').then(el => el.click());
            console.log("‚û°Ô∏è Click Sign In");

            await new Promise(r => setTimeout(r, 1000));
            await waitForElement('div.sign-in-button[style*="margin-top: 24px"]').then(el => el.click());
            console.log("‚û°Ô∏è Click Sign in with Email");

            await waitForElement('p.clickable a').then(el => el.click());
            console.log("‚û°Ô∏è Click Sign up for free");

            const emailInput = await waitForElement('input[placeholder="Enter Email Address"]');
            const passInput = await waitForElement('input[placeholder="Password (at least 8 characters)"]');
            const confirmInput = await waitForElement('input[placeholder="Confirm Password"]');
            
            emailInput.value = email;
            passInput.value = password;
            confirmInput.value = password;
            [emailInput, passInput, confirmInput].forEach(input => input.dispatchEvent(new Event('input', { bubbles: true })));

            await waitForElement('.generic-button.critical.large').then(el => el.click());
            console.log("‚û°Ô∏è ƒê√£ click Next, ch·ªù captcha (n·∫øu c√≥)...");

            await new Promise(r => setTimeout(r, 8000)); // Ch·ªù x·ª≠ l√Ω captcha

            const codeInput = await waitForElement('input[placeholder="Verification Code"]');
            const code = await fetchVerificationCode(email);
            if (!code) {
                throw new Error("Kh√¥ng th·ªÉ l·∫•y m√£ x√°c minh t·ª± ƒë·ªông.");
            }

            codeInput.value = code;
            codeInput.dispatchEvent(new Event('input', { bubbles: true }));

            await waitForElement('button.generic-button.critical.large:not(:disabled)').then(el => el.click());
            console.log("‚úÖ Ho√†n t·∫•t ƒëƒÉng k√Ω!");

            await new Promise(r => setTimeout(r, 2000));
            console.log(`üåê ƒêang v√†o link follow: ${followLink}`);
            window.location.href = followLink;
            await new Promise(r => setTimeout(r, 5000)); 

            await waitForElement('button.follow-button').then(el => el.click());
            console.log("‚úÖ ƒê√£ nh·∫•n n√∫t Follow.");

            console.log("üåê ƒêƒÉng xu·∫•t...");
            window.location.href = 'https://app.klingai.com/global/account/sign-out';
            await new Promise(r => setTimeout(r, 3000));

        } catch (err) {
            console.error("‚ùå Flow th·∫•t b·∫°i:", err);
            throw err;
        }
    }

    async function main() {
        const followLink = prompt("Nh·∫≠p link buff follow (v√≠ d·ª•: https://app.klingai.com/global/user-home/7054579/all):");
        if (!followLink || !followLink.startsWith('https://app.klingai.com/')) return alert("‚ùå Link kh√¥ng h·ª£p l·ªá.");

        const runCount = parseInt(prompt("Nh·∫≠p s·ªë l·∫ßn ch·∫°y:"));
        if (isNaN(runCount) || runCount <= 0) return alert("‚ùå S·ªë l·∫ßn ch·∫°y kh√¥ng h·ª£p l·ªá.");

        console.log(`üîÑ S·∫Ω ch·∫°y ${runCount} l·∫ßn v·ªõi link: ${followLink}`);

        for (let i = 1; i <= runCount; i++) {
            console.log(`\n--- B·∫Øt ƒë·∫ßu l·∫ßn ch·∫°y ${i}/${runCount} ---`);
            try {
                window.location.href = 'https://app.klingai.com/global';
                await new Promise(r => setTimeout(r, 5000));
                await runFlow(followLink);
                console.log(`‚úÖ Ho√†n th√†nh l·∫ßn ch·∫°y ${i}.`);
            } catch (err) {
                alert(`L·ªói ·ªü l·∫ßn ch·∫°y ${i}: ${err.message}. Script s·∫Ω d·ª´ng l·∫°i.`);
                break;
            }
            if (i < runCount) {
                console.log(`‚è≥ Chu·∫©n b·ªã cho l·∫ßn ch·∫°y ti·∫øp theo...`);
            }
        }
        alert("üéâ ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√°c l·∫ßn ch·∫°y!");
    }

    await main();
})();
