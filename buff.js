(async () => {
    // =================================================================
    // C·∫§U H√åNH: D√ÅN URL VERCEL API C·ª¶A B·∫†N V√ÄO ƒê√ÇY
    // B·∫°n c·∫ßn deploy c√°c file API ƒë√£ ƒë∆∞·ª£c cung c·∫•p tr∆∞·ªõc ƒë√≥ l√™n Vercel ƒë·ªÉ l·∫•y URL n√†y.
    // =================================================================
    const YOUR_VERCEL_APP_URL = 'https://kling-api-proxy.vercel.app'; // <--- V√ç D·ª§, THAY TH·∫æ B·∫∞NG URL TH·ª∞C T·∫æ C·ª¶A B·∫†N
    // =================================================================


    console.log("üöÄ Script b·∫Øt ƒë·∫ßu... (Phi√™n b·∫£n Mailsac)");
    if (YOUR_VERCEL_APP_URL.includes('your-name-here')) {
         alert("L·ªñI: B·∫°n ch∆∞a c·∫≠p nh·∫≠t YOUR_VERCEL_APP_URL trong script. Vui l√≤ng d√°n link Vercel c·ªßa b·∫°n v√†o.");
         return;
    }

    // H√†m t·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n (gi·ªØ nguy√™n)
    function generatePassword(length = 10) {
        const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*";
        let password = "";
        for (let i = 0; i < length; i++) {
            password += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return password;
    }

    // THAY ƒê·ªîI 1: H√†m l·∫•y email ƒë∆∞·ª£c ƒë∆°n gi·∫£n h√≥a.
    // N√≥ s·∫Ω g·ªçi API 'create-email' tr√™n Vercel c·ªßa b·∫°n ƒë·ªÉ l·∫•y m·ªôt ƒë·ªãa ch·ªâ email Mailsac ng·∫´u nhi√™n.
    async function fetchEmail() {
        try {
            console.log("üì® ƒêang y√™u c·∫ßu email m·ªõi t·ª´ API Vercel...");
            const res = await fetch(`${YOUR_VERCEL_APP_URL}/api/create-email`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
            });
            if (!res.ok) throw new Error(`L·ªói API create-email: ${res.status}`);
            const json = await res.json();
            if (!json.email) throw new Error("Ph·∫£n h·ªìi API kh√¥ng ch·ª©a email.");
            
            console.log(`‚úÖ Nh·∫≠n ƒë∆∞·ª£c email: ${json.email}`);
            return { email: json.email }; // Ch·ªâ tr·∫£ v·ªÅ email, kh√¥ng c√≤n sessionId hay authToken
        } catch (err) {
            console.error("‚ùå L·ªói khi g·ªçi API create-email:", err.message);
            throw err;
        }
    }

    // THAY ƒê·ªîI 2: H√†m l·∫•y m√£ x√°c minh ƒë∆∞·ª£c c·∫≠p nh·∫≠t.
    // N√≥ nh·∫≠n 'email' l√†m tham s·ªë v√† g·ªçi API 'check-email' tr√™n Vercel.
    async function fetchVerificationCode(email) {
        if (!email) {
            console.warn("‚ö†Ô∏è Kh√¥ng c√≥ email, b·ªè qua l·∫•y m√£.");
            return null;
        }
        console.log(`‚è≥ ƒêang ch·ªù m√£ x√°c minh cho ${email}...`);
        // L·∫∑p l·∫°i trong 60 gi√¢y (30 l·∫ßn * 2 gi√¢y)
        for (let i = 0; i < 30; i++) {
            try {
                const res = await fetch(`${YOUR_VERCEL_APP_URL}/api/check-email`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ email: email }) // G·ª≠i email c·∫ßn ki·ªÉm tra
                });
                if (!res.ok) throw new Error(`L·ªói API check-email: ${res.status}`);
                
                const json = await res.json();
                
                // X·ª≠ l√Ω ph·∫£n h·ªìi ƒë∆°n gi·∫£n t·ª´ API Mailsac
                if (json && json.text) {
                    const content = json.text;
                    console.log("üìß Nh·∫≠n ƒë∆∞·ª£c n·ªôi dung email.");
                    const match = content.match(/\b\d{6}\b/); // T√¨m m√£ 6 ch·ªØ s·ªë
                    if (match) {
                        console.log(`‚úÖ T√¨m th·∫•y m√£ x√°c minh: ${match[0]}`);
                        return match[0];
                    }
                }
                // N·∫øu kh√¥ng c√≥ email, ƒë·ª£i 2 gi√¢y r·ªìi th·ª≠ l·∫°i
                await new Promise(r => setTimeout(r, 2000));
            } catch (err) {
                console.error("‚ùå L·ªói khi g·ªçi API check-email:", err.message);
                // Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i ƒë·ªÉ tr√°nh spam server
                await new Promise(r => setTimeout(r, 2000));
            }
        }
        console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m√£ x√°c minh trong email sau 60 gi√¢y.");
        return null;
    }

    // C√°c h√†m ti·ªán √≠ch (waitForElement, waitForCaptcha, v.v.) ƒë∆∞·ª£c gi·ªØ nguy√™n
    async function waitForElement(selector, timeout = 20000) {
        return new Promise((resolve, reject) => {
            const interval = setInterval(() => {
                const el = document.querySelector(selector);
                if (el) {
                    clearInterval(interval);
                    clearTimeout(timer);
                    resolve(el);
                }
            }, 500);
            const timer = setTimeout(() => {
                clearInterval(interval);
                reject(new Error(`Timeout ch·ªù ph·∫ßn t·ª≠: ${selector}`));
            }, timeout);
        });
    }

    async function waitForCaptcha(timeout = 30000) {
        console.log("üß© ƒêang ch·ªù captcha (n·∫øu c√≥)...");
        return new Promise((resolve) => {
            const interval = setInterval(() => {
                if (!document.querySelector('.kwai-captcha-slider-wrapper')) {
                    clearInterval(interval);
                    clearTimeout(timer);
                    console.log("‚úÖ Captcha ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ho·∫∑c kh√¥ng xu·∫•t hi·ªán.");
                    resolve();
                }
            }, 500);
            const timer = setTimeout(() => {
                clearInterval(interval);
                console.warn("‚ö†Ô∏è H·∫øt th·ªùi gian ch·ªù captcha, ti·∫øp t·ª•c flow...");
                resolve();
            }, timeout);
        });
    }
    
    // ... c√°c h√†m ti·ªán √≠ch kh√°c c√≥ th·ªÉ th√™m v√†o ƒë√¢y n·∫øu c·∫ßn ...

    // H√†m th·ª±c hi·ªán flow ch√≠nh
    async function runFlow(followLink) {
        try {
            // THAY ƒê·ªîI 3: Lu·ªìng logic ƒë∆∞·ª£c ƒë∆°n gi·∫£n h√≥a, kh√¥ng c√≤n sessionId, authToken.
            const { email } = await fetchEmail();
            const password = generatePassword();
            console.log("T√†i kho·∫£n m·ªõi:", { email, password });

            // B·∫Øt ƒë·∫ßu lu·ªìng ƒëƒÉng k√Ω tr√™n giao di·ªán
            await waitForElement('div.login').then(e => e.click());
            console.log("‚û°Ô∏è ƒê√£ nh·∫•n 'Sign In'");
            await new Promise(r => setTimeout(r, 1000));
            await waitForElement('div.sign-in-button[style*="margin-top: 24px"]').then(e => e.click());
            console.log("‚û°Ô∏è ƒê√£ nh·∫•n 'Sign in with email'");
            await new Promise(r => setTimeout(r, 1000));
            await waitForElement('p.clickable a').then(e => e.click());
            console.log("‚û°Ô∏è ƒê√£ nh·∫•n 'Sign up for free'");

            const emailInput = await waitForElement('input[placeholder="Enter Email Address"]');
            const passInput = await waitForElement('input[placeholder="Password (at least 8 characters)"]');
            const confirmInput = await waitForElement('input[placeholder="Confirm Password"]');

            emailInput.value = email;
            passInput.value = password;
            confirmInput.value = password;
            [emailInput, passInput, confirmInput].forEach(input => input.dispatchEvent(new Event('input', { bubbles: true })));

            await waitForElement('.generic-button.critical.large').then(e => e.click());
            console.log("‚û°Ô∏è ƒê√£ nh·∫•n 'Next', ƒëang ch·ªù captcha...");

            await waitForCaptcha(30000);

            const codeInput = await waitForElement('input[placeholder="Verification Code"]', 60000);
            const code = await fetchVerificationCode(email);
            if (!code) {
                throw new Error("Kh√¥ng th·ªÉ t·ª± ƒë·ªông l·∫•y m√£ x√°c minh.");
            }

            codeInput.value = code;
            codeInput.dispatchEvent(new Event('input', { bubbles: true }));

            await waitForElement('button.generic-button.critical.large:not([disabled])').then(e => e.click());
            console.log("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng!");
            
            await new Promise(r => setTimeout(r, 3000)); // Ch·ªù login v√† chuy·ªÉn trang

            console.log(`üåê ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn link follow: ${followLink}`);
            window.location.href = followLink;
            await new Promise(r => setTimeout(r, 5000)); // Ch·ªù trang t·∫£i

            await waitForElement('button.follow-button').then(e => e.click());
            console.log("‚úÖ ƒê√£ nh·∫•n n√∫t Follow.");

            console.log("üåê ƒêƒÉng xu·∫•t ƒë·ªÉ chu·∫©n b·ªã cho l·∫ßn ch·∫°y ti·∫øp theo...");
            window.location.href = 'https://app.klingai.com/global/account/sign-out';
            await new Promise(r => setTimeout(r, 3000)); // Ch·ªù ƒëƒÉng xu·∫•t

        } catch (err) {
            console.error("‚ùå Flow th·∫•t b·∫°i:", err);
            throw err;
        }
    }

    // H√†m ch√≠nh ƒë·ªÉ ch·∫°y v√≤ng l·∫∑p
    async function main() {
        const followLink = prompt("Nh·∫≠p link buff follow (v√≠ d·ª•: https://app.klingai.com/global/user-home/7054579/all):");
        if (!followLink || !followLink.startsWith('https://app.klingai.com/')) {
            return alert("‚ùå Link kh√¥ng h·ª£p l·ªá.");
        }

        const runCount = parseInt(prompt("Nh·∫≠p s·ªë l·∫ßn ch·∫°y:"));
        if (isNaN(runCount) || runCount <= 0) {
            return alert("‚ùå S·ªë l·∫ßn ch·∫°y kh√¥ng h·ª£p l·ªá.");
        }

        console.log(`üîÑ S·∫Ω ch·∫°y ${runCount} l·∫ßn v·ªõi link: ${followLink}`);

        for (let i = 1; i <= runCount; i++) {
            console.log(`\n\n--- B·∫Øt ƒë·∫ßu l·∫ßn ch·∫°y th·ª© ${i}/${runCount} ---`);
            try {
                // ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang ch·ªß ƒë·ªÉ reset tr·∫°ng th√°i
                window.location.href = 'https://app.klingai.com/global';
                await new Promise(r => setTimeout(r, 5000)); // Ch·ªù trang ch·ªß t·∫£i xong

                await runFlow(followLink);
                console.log(`‚úÖ Ho√†n th√†nh l·∫ßn ch·∫°y th·ª© ${i}`);
            } catch (err) {
                console.error(`‚ùå L·ªói ·ªü l·∫ßn ch·∫°y th·ª© ${i}:`, err);
                alert(`L·ªói ·ªü l·∫ßn ch·∫°y ${i}. Vui l√≤ng ki·ªÉm tra Console (F12) ƒë·ªÉ bi·∫øt chi ti·∫øt. Script s·∫Ω d·ª´ng l·∫°i.`);
                break;
            }
            if (i < runCount) {
                console.log(`‚è≥ Chu·∫©n b·ªã cho l·∫ßn ch·∫°y ti·∫øp theo...`);
            }
        }
        console.log("üéâ ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√°c l·∫ßn ch·∫°y!");
        alert("üéâ ƒê√£ ho√†n th√†nh t·∫•t c·∫£ c√°c l·∫ßn ch·∫°y!");
    }

    // B·∫Øt ƒë·∫ßu ch·∫°y ch∆∞∆°ng tr√¨nh
    try {
        await main();
    } catch (err) {
        console.error("‚ùå Script g·∫∑p l·ªói kh√¥ng mong mu·ªën:", err);
        alert("Script g·∫∑p l·ªói kh√¥ng mong mu·ªën. Vui l√≤ng ki·ªÉm tra Console (F12).");
    }
})();
